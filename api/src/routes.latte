<?php // Julie automatic generated file

use Slim\Http\Request;
use Slim\Http\Response;
use App\Service\LoginService;
use Firebase\JWT\JWT;

$app->add(function (Request $request, Response $response, $next) {
	return $next($request, $response)
		->withHeader("Access-Control-Allow-Origin", "*")
        ->withHeader("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, Accept, Origin, Authorization")
        ->withHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, PATCH, OPTIONS");	
});

{foreach $ajax as $request}
$app->{$request['method']}('{$request['url']}', function (Request $request, Response $response, array $args) {
	$roles = ['{=implode("', '", $request['roles'])}'];
	if ($request->getHeader('Authorization')) {
		$authorization = end($request->getHeader('Authorization'));
		if ($authorization) {
			$user = (array) JWT::decode($authorization, LoginService::JWT_KEY, ['HS256']);
		} else {
		$user = (array) [];
		}
	} else {
		$user = (array) [];
	}
	if (!$user && !in_array('guest', $roles)) {
		return $response->withStatus(401);
	}
	if ($user && !in_array($user['role'], $roles)) {
		return $response->withStatus(401);
	}
	$params = (array) $args;
	$body = $request->getParsedBody() ?: [];
{if $request['mock'] === "true"}
	return $response->withStatus(200)->withJson(json_decode('{$request['mockData']}'));
{elseif $request['entity']}
	${$request['service']}Entity = $this->MF->{$request['service']}Service()->newEntity($params + $body);
	$result = $this->MF->{$request['service']}Service()->{$request['title']}(${$request['service']}Entity, $user);
{else}
	$result = $this->MF->{$request['service']}Service()->{$request['title']}({foreach 
		$request['params']['user'] as $user}$user['{$user}'], {/foreach}{foreach 
		$request['params']['params'] as $param}$params['{$param}'], {/foreach}{foreach 
		$request['params']['body'] as $body}$body['{$body}'], {/foreach}$isForOwner, $isForManager);
{/if}
	$status = {if $request['method'] === 'get'}!!$result ? 200 : 400{elseif 
		$request['method'] === 'post'}!!$result ? 201 : 400{elseif
		$request['method'] === 'put'}!!$result ? 400 : 204{elseif
		$request['method'] === 'delete'}!! $result ? 400 : 204{/if};
	return $response->withStatus($status)->withJson($result);
});

{/foreach}
$app->post('/files', function (Request $request, Response $response, array $args) {
	$uploadedFiles = $request->getUploadedFiles();
	$file = $uploadedFiles['file'];
	$directory = __DIR__ . '/files/';
	$file->moveTo($directory . $uploadedFile->getClientFilename());
	return $response->withStatus(201)->withJson($filename);
});